"rmlC" = expression(italic("∆rmlC")),
"epsE" = expression(italic("∆epsE"))))
# plot, fold change lux
p <- ggplot(dat, aes(x = strain_ord, y = fold_change_7dpi, fill = strain_ord, colour = strain_ord)) +
stat_summary(fun.data = mean_se, fun.args = list(mult = 1), geom = "errorbar", width = .75) +
stat_summary(fun = mean, geom = "point", size = 4) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
facet_wrap(~ ecotype) +
scale_fill_viridis_d(option = "D") + scale_color_viridis_d(option = "D") +
theme_bw(base_size = 20) + guides(fill = "none", colour = "none") +
xlab("Strain") + ylab("Fold Change(Lux)") +
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("WT" = "WT",
"tagH" = expression(italic("∆tagH")),
"spsA" = expression(italic("∆spsA")),
"wfgD" = expression(italic("∆wfgD")),
"tagG" = expression(italic("∆tagG")),
"rmlC" = expression(italic("∆rmlC")),
"epsE" = expression(italic("∆epsE")))) +
geom_text(data = dat, aes(x = strain, y = y_label_position, label = significance),
color = "black", size = 5) + theme(legend.position = "none")
p
# save plot
ggsave("./figures/06_plant_infections_luciferase.pdf", p, height = 5,width = 8)
# read in qualitative plant data
# I manually re-named the split plate (Col0-Eyach_R3) to match contam data frame
dat <- read.csv("./data/07_plant_disease/plant_disease.csv")
# read in contamination data (rows to remove from dat)
contam <- read.csv("./data/07_plant_disease/contam.csv")
# Remove rows from dat where both 'Well' and 'file_name' match those in contam
dat_filtered <- dat %>%
anti_join(contam, by = c("Well", "File_Name"))
# see if there are duplicate rows in contam
contam %>% group_by(Well, File_Name) %>% filter(n() > 1) # no duplicates
# read in plate layout
layout_plate <- read.csv("./data/07_plant_disease/combined_plate_layouts.csv", header = T)
# Merge the two dataframes based on exact matches of Well and file_name <-> Batch
merged_data <- merge(layout_plate, dat_filtered,
by.x = c("Well", "file_name"),
by.y = c("Well", "File_Name"), all.x = TRUE)
# remove NAs
merged_data <- na.omit(merged_data)
# remove rmlC-FS
merged_data <- subset(merged_data, strain != "RmlC-FS")
# read in qualitative plant data
# I manually re-named the split plate (Col0-Eyach_R3) to match contam data frame
dat <- read.csv("./data/07_plant_disease/plant_disease.csv")
# read in contamination data (rows to remove from dat)
contam <- read.csv("./data/07_plant_disease/contam.csv")
# Remove rows from dat where both 'Well' and 'file_name' match those in contam
dat_filtered <- dat %>%
anti_join(contam, by = c("Well", "File_Name"))
# see if there are duplicate rows in contam
contam %>% group_by(Well, File_Name) %>% filter(n() > 1) # no duplicates
# read in plate layout
layout_plate <- read.csv("./data/07_plant_disease/combined_plate_layouts.csv", header = T)
# Merge the two dataframes based on exact matches of Well and file_name <-> Batch
merged_data <- merge(layout_plate, dat_filtered,
by.x = c("Well", "file_name"),
by.y = c("Well", "File_Name"), all.x = TRUE)
# remove NAs
merged_data <- na.omit(merged_data)
# remove rmlC-FS
merged_data <- subset(merged_data, strain != "RmlC-FS")
# Create the new column 'ecotype' based on the first part of 'file_name'
merged_data$ecotype <- sub("^(Col0|Eyach)_.*", "\\1", merged_data$file_name)
# First, count how many Phenotype X per strain and total counts
plot_data <- merged_data %>%
group_by(strain, ecotype) %>%
summarise(
total = n(),
X_count = sum(Phenotype == "X")
) %>%
mutate(prop_X = X_count / total)
# Now join back with full count data (for stacked bar plot)
full_plot_data <- merged_data %>%
count(strain, Phenotype, ecotype) %>%
left_join(plot_data %>% select(strain, ecotype, prop_X), by = c("strain", "ecotype")) %>%
mutate(strain = reorder(strain, prop_X))  # <-- reorder strains based on proportion of X
# Now plot
p <- ggplot(full_plot_data, aes(x = strain, y = n, fill = Phenotype)) +
geom_bar(stat = "identity",position = "fill") +
facet_wrap(~ ecotype) +
theme_bw() +
xlab("Strain (ordered by proportion X)") +
ylab("Count of Phenotype") +
ggtitle("Stacked Phenotype Counts per Strain, Ordered by Proportion of 'X'") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d(option = "D")
p
# read in qualitative plant data
# I manually re-named the split plate (Col0-Eyach_R3) to match contam data frame
dat <- read.csv("./data/07_plant_disease/plant_disease.csv")
# replace 4 groups with only 2
dat$Phenotype[dat$Phenotype == "B"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "S"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "X"] <- "Diseased/Dead"
dat$Phenotype[dat$Phenotype == "D"] <- "Diseased/Dead"
# read in contamination data (rows to remove from dat)
contam <- read.csv("./data/07_plant_disease/contam.csv")
# Remove rows from dat where both 'Well' and 'file_name' match those in contam
dat_filtered <- dat %>%
anti_join(contam, by = c("Well", "File_Name"))
# see if there are duplicate rows in contam
contam %>% group_by(Well, File_Name) %>% filter(n() > 1) # no duplicates
# read in plate layout
layout_plate <- read.csv("./Trade-offs/green_pixels/plate_layouts/combined_plate_layouts.csv", header = T)
# read in plate layout
layout_plate <- read.csv("./data/07_plant_disease/combined_plate_layouts.csv", header = T)
# Merge the two dataframes based on exact matches of Well and file_name <-> Batch
merged_data <- merge(layout_plate, dat_filtered,
by.x = c("Well", "file_name"),
by.y = c("Well", "File_Name"), all.x = TRUE)
# remove NAs
merged_data <- na.omit(merged_data)
# remove rmlC-FS
merged_data <- subset(merged_data, strain != "RmlC-FS")
# Create the new column 'ecotype' based on the first part of 'file_name'
merged_data$ecotype <- sub("^(Col0|Eyach)_.*", "\\1", merged_data$file_name)
# First, count how many Phenotype X per strain and total counts
plot_data <- merged_data %>%
group_by(strain, ecotype) %>%
summarise(
total = n(),
X_count = sum(Phenotype == "Healthy")
) %>%
mutate(prop_X = X_count / total)
# Now join back with full count data (for stacked bar plot)
full_plot_data <- merged_data %>%
count(strain, Phenotype, ecotype) %>%
left_join(plot_data %>% select(strain, ecotype, prop_X), by = c("strain", "ecotype")) %>%
mutate(strain = reorder(strain, prop_X))  # <-- reorder strains based on proportion of X
# remove OBC from data
full_plot_data <- subset(full_plot_data, strain != "OBC")
# Now plot
p <- ggplot(full_plot_data, aes(x = strain, y = n, fill = Phenotype)) +
geom_bar(stat = "identity",position = "fill") +
facet_wrap(~ ecotype) +
theme_bw() + theme(text = element_text(size = 20)) +
xlab("Strain (ordered by proportion X)") +
ylab("Count of Phenotype") +
ggtitle("Stacked Phenotype Counts per Strain, Ordered by Proportion of 'X'") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d(option = "D")
p
# save as pdf
ggsave("./figures/07_plant_disease.pdf", p, width = 7, height = 4)
# Now plot
p <- ggplot(full_plot_data, aes(x = strain, y = n, fill = Phenotype)) +
geom_bar(stat = "identity",position = "fill") +
facet_wrap(~ ecotype) +
theme_bw() + theme(text = element_text(size = 20)) +
xlab("Strain (ordered by proportion X)") +
ylab("Count of Phenotype") +
ggtitle("Stacked Phenotype Counts per Strain, Ordered by Proportion of 'X'") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d(option = "D") +
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("WT" = "WT",
"tagH" = expression(italic("∆tagH")),
"spsA" = expression(italic("∆spsA")),
"wfgD" = expression(italic("∆wfgD")),
"tagG" = expression(italic("∆tagG")),
"rmlC" = expression(italic("∆rmlC")),
"epsE" = expression(italic("∆epsE"))))
p
# save as pdf
ggsave("./figures/07_plant_disease.pdf", p, width = 7, height = 4)
# Now plot
p <- ggplot(full_plot_data, aes(x = strain, y = n, fill = Phenotype)) +
geom_bar(stat = "identity",position = "fill") +
facet_wrap(~ ecotype) +
theme_bw() + theme(text = element_text(size = 20)) +
xlab("Strain") +
ylab("% Phenotype") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d(option = "D") +
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("WT" = "WT",
"tagH" = expression(italic("∆tagH")),
"spsA" = expression(italic("∆spsA")),
"wfgD" = expression(italic("∆wfgD")),
"tagG" = expression(italic("∆tagG")),
"rmlC" = expression(italic("∆rmlC")),
"epsE" = expression(italic("∆epsE"))))
p
# save as pdf
ggsave("./figures/07_plant_disease.pdf", p, width = 7, height = 4)
# stats
# pivot to get one row per strain/ecotype with healthy and diseased counts
wide_data <- full_plot_data %>%
pivot_wider(names_from = Phenotype, values_from = n, values_fill = 0) %>%
rename(diseased = `Diseased/Dead`, healthy = Healthy) %>%
mutate(total = diseased + healthy)
# Fit the glm
model <- glm(cbind(diseased, healthy) ~ strain * ecotype,
data = wide_data, family = binomial)
summary(model)
# assuming you have a data frame with columns:
# - diseased: number of diseased plants
# - healthy: number of healthy plants
# - strain: strain name (WT or mutant)
# - batch: replicate or block effect
dat$tot <- dat$diseased + dat$healthy
model <- glmer(cbind(diseased, healthy) ~ strain + (1 | batch),
data = dat, family = binomial)
summary(model)
library(emmeans)
emmeans(model, pairwise ~ strain | ecotype, adjust = "fdr")
wide_data <- full_plot_data %>%
pivot_wider(names_from = Phenotype, values_from = n, values_fill = 0) %>%
rename(diseased = `Diseased/Dead`, healthy = Healthy) %>%
mutate(total = diseased + healthy)
# Fit the glm
model <- glm(cbind(diseased, healthy) ~ strain * ecotype,
data = wide_data, family = binomial)
summary(model)
full_plot_data
# Now plot
p <- ggplot(full_plot_data, aes(x = strain, y = n, fill = Phenotype)) +
geom_bar(stat = "identity",position = "fill") +
facet_wrap(~ ecotype) +
theme_bw() + theme(text = element_text(size = 20)) +
xlab("Strain") +
ylab("Percent") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d(option = "D") +
scale_x_discrete(guide = guide_axis(angle = 90),
labels = c("WT" = "WT",
"tagH" = expression(italic("∆tagH")),
"spsA" = expression(italic("∆spsA")),
"wfgD" = expression(italic("∆wfgD")),
"tagG" = expression(italic("∆tagG")),
"rmlC" = expression(italic("∆rmlC")),
"epsE" = expression(italic("∆epsE"))))
p
# save as pdf
ggsave("./figures/07_plant_disease.pdf", p, width = 7, height = 4)
library(dplyr)
library(lme4)
library(multcomp)
install.packages("multcomp")
library(multcomp)
# Make binary outcome: Healthy = 1, Diseased/Dead = 0
binom_dat <- full_plot_data %>%
mutate(
outcome = ifelse(Phenotype == "Healthy", 1, 0)
)
# Expand counts into successes/failures for glm
glm_dat <- binom_dat %>%
select(strain, ecotype, outcome, n) %>%
tidyr::uncount(n)  # repeats rows n times
# Fit logistic regression by ecotype
col0  <- subset(glm_dat, ecotype == "Col0")
View(binom_dat)
# Expand counts into successes/failures for glm
glm_dat <- binom_dat %>%
select(strain, ecotype, outcome, n) %>%
tidyr::uncount(n)  # repeats rows n times
library(dplyr)
library(tidyr)
library(lme4)
library(multcomp)
# Make binary outcome: Healthy = 1, Diseased/Dead = 0
binom_dat <- full_plot_data %>%
mutate(outcome = ifelse(Phenotype == "Healthy", 1, 0))
# Expand counts (n = number of plants) into individual rows
glm_dat <- binom_dat %>%
uncount(weights = n)  # repeats each row 'n' times
# Fit logistic regression separately per ecotype
col0  <- subset(glm_dat, ecotype == "Col0")
eyach <- subset(glm_dat, ecotype == "Eyach")
# WT as reference
col0$strain  <- relevel(factor(col0$strain), ref = "WT")
eyach$strain <- relevel(factor(eyach$strain), ref = "WT")
# Logistic regressions
model_col0  <- glm(outcome ~ strain, family = binomial, data = col0)
model_eyach <- glm(outcome ~ strain, family = binomial, data = eyach)
summary(model_col0)
summary(model_eyach)
# Multiple comparisons vs WT (Dunnett-style)
comp_col0 <- glht(model_col0, linfct = mcp(strain = "Dunnett"))
comp_eyach <- glht(model_eyach, linfct = mcp(strain = "Dunnett"))
summary(comp_col0, test = adjusted("fdr"))
summary(comp_eyach, test = adjusted("fdr"))
summary(comp_col0, test = adjusted("fdr"))
summary(comp_eyach, test = adjusted("fdr"))
library(dplyr)
library(tidyr)
library(lme4)
library(multcomp)
# Make binary outcome: Healthy = 1, Diseased/Dead = 0
binom_dat <- full_plot_data %>%
mutate(outcome = ifelse(Phenotype == "Healthy", 1, 0))
# Expand counts (n = number of plants) into individual rows
glm_dat <- binom_dat %>%
uncount(weights = n)  # repeats each row 'n' times
# Fit logistic regression separately per ecotype
col0  <- subset(glm_dat, ecotype == "Col0")
eyach <- subset(glm_dat, ecotype == "Eyach")
# WT as reference
col0$strain  <- relevel(factor(col0$strain), ref = "WT")
eyach$strain <- relevel(factor(eyach$strain), ref = "WT")
# Logistic regressions
model_col0  <- glm(outcome ~ strain, family = binomial, data = col0)
model_eyach <- glm(outcome ~ strain, family = binomial, data = eyach)
summary(model_col0)
summary(model_eyach)
# Multiple comparisons vs WT (Dunnett-style)
comp_col0 <- glht(model_col0, linfct = mcp(strain = "Dunnett"))
comp_eyach <- glht(model_eyach, linfct = mcp(strain = "Dunnett"))
summary(comp_col0, test = adjusted("fdr"))
summary(comp_eyach, test = adjusted("fdr"))
summary(comp_col0, test = adjusted("fdr"))
summary(comp_eyach, test = adjusted("fdr"))
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyr)
library(broom)
# Build %Healthy per strain/ecotype from 07 inputs
# read in qualitative plant data
dat <- read.csv("./data/07_plant_disease/plant_disease.csv")
# collapse 4 categories -> 2
dat$Phenotype[dat$Phenotype == "B"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "S"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "X"] <- "Diseased/Dead"
dat$Phenotype[dat$Phenotype == "D"] <- "Diseased/Dead"
# read in contamination rows to remove
contam <- read.csv("./data/07_plant_disease/contam.csv")
# drop contaminated wells
dat_filtered <- dat %>%
anti_join(contam, by = c("Well", "File_Name"))
# plate layout (to get strain/ecotype keys)
layout_plate <- read.csv("./data/07_plant_disease/combined_plate_layouts.csv", header = TRUE)
# merge by Well + file name (file_name in layout vs File_Name in scoring)
merged_data <- merge(layout_plate, dat_filtered,
by.x = c("Well", "file_name"),
by.y = c("Well", "File_Name"),
all.x = TRUE)
# remove NAs and rmlC-FS (consistent with 07 script)
merged_data <- na.omit(merged_data)
merged_data <- subset(merged_data, strain != "RmlC-FS")
# derive ecotype from file_name
merged_data$ecotype <- sub("^(Col0|Eyach)_.*", "\\1", merged_data$file_name)
# % Healthy per strain/ecotype
plot_data <- merged_data %>%
group_by(strain, ecotype) %>%
summarise(
total   = n(),
X_count = sum(Phenotype == "Healthy"),
.groups = "drop"
) %>%
mutate(prop_X = X_count / total)
lux_dat <- read.csv("./data/06_plant_infections/luciferase_7dpi.csv")
mean_lux <- lux_dat %>%
filter(!is.na(ecotype), ecotype != "") %>%
group_by(strain, ecotype) %>%
summarise(
mean_fold_change = mean(fold_change_7dpi, na.rm = TRUE),
.groups = "drop"
) %>%
na.omit()
# join and drop buffer/OBC to match earlier analyses
combined_dat <- inner_join(mean_lux, plot_data, by = c("strain", "ecotype")) %>%
filter(!strain %in% c("buffer", "OBC"))
# stats: per-ecotype linear models (prop_X ~ mean_fold_change)
# per-ecotype models
model_stats <- combined_dat %>%
group_by(ecotype) %>%
do({
mod <- lm(prop_X ~ mean_fold_change, data = .)
tibble(
r_squared = summary(mod)$r.squared,
slope     = coef(mod)[["mean_fold_change"]],
p_value   = summary(mod)$coefficients["mean_fold_change", "Pr(>|t|)"]
)
}) %>% ungroup()
print(model_stats)
# pooled model (optional)
model_pooled <- lm(prop_X ~ mean_fold_change + ecotype, data = combined_dat)
cat("\nPooled model (prop_X ~ mean_fold_change + ecotype):\n")
print(summary(model_pooled))
# plot: proportion Healthy vs mean fold-change, per ecotype trend lines
# annotation strings
lab_col0  <- model_stats %>% filter(ecotype == "Col0")  %>%
transmute(lbl = paste0("Col-0: R^2 = ", round(r_squared, 2),
", p = ", signif(p_value, 2))) %>% pull(lbl)
lab_eyach <- model_stats %>% filter(ecotype == "Eyach") %>%
transmute(lbl = paste0("Eyach: R^2 = ", round(r_squared, 2),
", p = ", signif(p_value, 2))) %>% pull(lbl)
# make the plot
p <- ggplot(combined_dat, aes(x = mean_fold_change, y = prop_X, color = ecotype, label = strain)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE, aes(group = ecotype), linetype = "dashed", size = 1) +
geom_text(vjust = -0.6, size = 3) +
scale_color_viridis_d(option = "D") +
theme_bw(base_size = 20) +
xlab("Mean bacterial load (fold change, 7 dpi)") +
ylab("Proportion healthy") +
ggtitle("Plant health vs. bacterial load across ecotypes") +
theme(legend.position = "top")
p
# place annotations in the upper right of the current data range
x_pos <- max(combined_dat$mean_fold_change, na.rm = TRUE)
y_pos1 <- max(combined_dat$prop_X, na.rm = TRUE)
y_pos2 <- y_pos1 - 0.08
p <- p +
annotate("text", x = x_pos, y = y_pos1, hjust = 1, label = lab_col0,  size = 5, color = "black") +
annotate("text", x = x_pos, y = y_pos2, hjust = 1, label = lab_eyach, size = 5, color = "black")
print(p)
p
ggsave("./figures/08_disease_vs_load.pdf", p, width = 8, height = 6)
# 08_disease_vs_load.R
# Relationship between plant health (proportion Healthy) and bacterial load (fold-change at 7 dpi)
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyr)
library(broom)
# Build %Healthy per strain/ecotype from 07 inputs
# read in qualitative plant data
dat <- read.csv("./data/07_plant_disease/plant_disease.csv")
# collapse 4 categories -> 2
dat$Phenotype[dat$Phenotype == "B"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "S"] <- "Healthy"
dat$Phenotype[dat$Phenotype == "X"] <- "Diseased/Dead"
dat$Phenotype[dat$Phenotype == "D"] <- "Diseased/Dead"
# read in contamination rows to remove
contam <- read.csv("./data/07_plant_disease/contam.csv")
# drop contaminated wells
dat_filtered <- dat %>%
anti_join(contam, by = c("Well", "File_Name"))
# plate layout (to get strain/ecotype keys)
layout_plate <- read.csv("./data/07_plant_disease/combined_plate_layouts.csv", header = TRUE)
# merge by Well + file name (file_name in layout vs File_Name in scoring)
merged_data <- merge(layout_plate, dat_filtered,
by.x = c("Well", "file_name"),
by.y = c("Well", "File_Name"),
all.x = TRUE)
# remove NAs and rmlC-FS
merged_data <- na.omit(merged_data)
merged_data <- subset(merged_data, strain != "RmlC-FS")
# derive ecotype from file_name
merged_data$ecotype <- sub("^(Col0|Eyach)_.*", "\\1", merged_data$file_name)
# % Healthy per strain/ecotype
plot_data <- merged_data %>%
group_by(strain, ecotype) %>%
summarise(
total   = n(),
X_count = sum(Phenotype == "Healthy"),
.groups = "drop"
) %>%
mutate(prop_X = X_count / total)
# load in 06 infection-load means and join
lux_dat <- read.csv("./data/06_plant_infections/luciferase_7dpi.csv")
mean_lux <- lux_dat %>%
filter(!is.na(ecotype), ecotype != "") %>%
group_by(strain, ecotype) %>%
summarise(
mean_fold_change = mean(fold_change_7dpi, na.rm = TRUE),
.groups = "drop"
) %>%
na.omit()
# join and drop buffer/OBC to match earlier analyses
combined_dat <- inner_join(mean_lux, plot_data, by = c("strain", "ecotype")) %>%
filter(!strain %in% c("buffer", "OBC"))
# stats: per-ecotype linear models (prop_X ~ mean_fold_change)
# per-ecotype models
model_stats <- combined_dat %>%
group_by(ecotype) %>%
do({
mod <- lm(prop_X ~ mean_fold_change, data = .)
tibble(
r_squared = summary(mod)$r.squared,
slope     = coef(mod)[["mean_fold_change"]],
p_value   = summary(mod)$coefficients["mean_fold_change", "Pr(>|t|)"]
)
}) %>% ungroup()
print(model_stats)
# pooled model (optional)
model_pooled <- lm(prop_X ~ mean_fold_change + ecotype, data = combined_dat)
print(summary(model_pooled))
# plot: proportion Healthy vs mean fold-change, per ecotype trend lines
# annotation strings
lab_col0  <- model_stats %>% filter(ecotype == "Col0")  %>%
transmute(lbl = paste0("Col-0: R^2 = ", round(r_squared, 2),
", p = ", signif(p_value, 2))) %>% pull(lbl)
lab_eyach <- model_stats %>% filter(ecotype == "Eyach") %>%
transmute(lbl = paste0("Eyach: R^2 = ", round(r_squared, 2),
", p = ", signif(p_value, 2))) %>% pull(lbl)
# make the plot
p <- ggplot(combined_dat, aes(x = mean_fold_change, y = prop_X, color = ecotype, label = strain)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE, aes(group = ecotype), linetype = "dashed", size = 1) +
geom_text(vjust = -0.6, size = 3) +
scale_color_viridis_d(option = "D") +
theme_bw(base_size = 20) +
xlab("Mean bacterial load (fold change, 7 dpi)") +
ylab("Proportion healthy") +
ggtitle("Plant health vs. bacterial load across ecotypes") +
theme(legend.position = "top")
# place annotations in the upper right of the current data range
x_pos <- max(combined_dat$mean_fold_change, na.rm = TRUE)
y_pos1 <- max(combined_dat$prop_X, na.rm = TRUE)
y_pos2 <- y_pos1 - 0.08
p <- p +
annotate("text", x = x_pos, y = y_pos1, hjust = 1, label = lab_col0,  size = 5, color = "black") +
annotate("text", x = x_pos, y = y_pos2, hjust = 1, label = lab_eyach, size = 5, color = "black")
p
# save plot
ggsave("./figures/08_disease_vs_load.pdf", p, width = 8, height = 6)
