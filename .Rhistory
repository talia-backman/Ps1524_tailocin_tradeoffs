alpha_thr <- 0.05
dat2 <- dat2 %>% mutate(Significance_RT = case_when(
RT_set == "Both"       ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
RT_set == "Col-0 only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr, "Significant", "Not Significant"),
RT_set == "Eyach only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
TRUE ~ NA_character_))
# modify the plot to add labels to only focal RTO genes
# Only annotate selected genes
dat2_annotate <- subset(dat2, gene_or_product %in% c("wfgD", "rmlC_1", "tagG_2", "tagH_2", "epsE_4"))
# for some reason rmlC_1 duplicates, so remove duplicate row
dat2_annotate <- dat2_annotate[!duplicated(dat2_annotate), ]
p3 <- ggplot(dat2, aes(x = log2FoldChange_eyach1025, y = logFC_tailocin)) +
geom_point(data = subset(dat2, Category != "Resistance Trade-off"),
aes(color = Significance, shape = Category, alpha = Significance), size = 1.4) +
geom_point(data = subset(dat2, RT_set != "None"),
aes(color = RT_set, shape = Category, alpha = Significance_RT), size = 1.4, stroke = 1.2) +
scale_color_manual(values = c("Significant" = "black", "Not Significant" = "lightgrey", rt_cols),
breaks = c("Not Significant", "Significant"), name = "Significance") +
scale_alpha_manual(values = c("Significant" = 1, "Not Significant" = 0.2), name = "Significance") +
xlab("log Fold Change Eyach") +
ylab("log Fold Change Tailocin") +
theme_minimal() +
geom_text_repel(data = dat2_annotate, aes(label = gene_or_product),
size = 2, box.padding = 0.1)
# eyach scatterplot with colored crosses for RT sets
rt_cols <- c("Both" = "#73D055FF","Col-0 only" = "#440154FF","Eyach only" = "#31688EFF")
# modify the plot to add labels to only focal RTO genes
# Only annotate selected genes
dat2_annotate <- subset(dat2, gene_or_product %in% c("wfgD", "rmlC_1", "tagG_2", "tagH_2", "epsE_4"))
# for some reason rmlC_1 duplicates, so remove duplicate row
dat2_annotate <- dat2_annotate[!duplicated(dat2_annotate), ]
p3 <- ggplot(dat2, aes(x = log2FoldChange_eyach1025, y = logFC_tailocin)) +
geom_point(data = subset(dat2, Category != "Resistance Trade-off"),
aes(color = Significance, shape = Category, alpha = Significance), size = 1.4) +
geom_point(data = subset(dat2, RT_set != "None"),
aes(color = RT_set, shape = Category, alpha = Significance_RT), size = 1.4, stroke = 1.2) +
scale_color_manual(values = c("Significant" = "black", "Not Significant" = "lightgrey", rt_cols),
breaks = c("Not Significant", "Significant"), name = "Significance") +
scale_alpha_manual(values = c("Significant" = 1, "Not Significant" = 0.2), name = "Significance") +
xlab("log Fold Change Eyach") +
ylab("log Fold Change Tailocin") +
theme_minimal() +
geom_text_repel(data = dat2_annotate, aes(label = gene_or_product),
size = 2, box.padding = 0.1)
p3
# 04_tnseq_scatter.R
#
# Purpose:
#   Visualize TnSeq-derived plant fitness/phenotypes as a scatter (or similar summary).
#
# Input:
#   - data/04_tnseq_scatter/tailocin_plant_fitness.csv
#
# Output:
#   - figures/04_tnseq_scatter.pdf
#
# Dependencies:
#   dplyr, ggplot2, viridis
#
# Notes:
#   - Tailor axes/labels to fitness metric used in the CSV.
library(ggplot2)
library(dplyr)
library(viridis)
library(ggrepel)
library(stringr)
library(ggnewscale)
library(readr)
# read in TnSeq data
dat <- read.csv("./data/04_tnseq_scatter/input/TB_official_tradeoffs_with_genes.csv")
# add significance column for plotting
dat <- dat %>% mutate(Significance = ifelse(pvalue_eyach1025 < 0.05 & P.Value_tailocin < 0.05 & pvalue_col1025 < 0.05,
"Significant", "Not Significant"))
# add category column for plotting
dat <- dat %>%
mutate(Category = case_when(
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin > 0 ~ "Resistance Trade-off both ecotypes",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin > 0 ~ "Mutual Benefit",
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin < 0 ~ "Mutual Detriment",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin < 0 ~ "Non-Focal Trade-off"))
# see how many genes there are per category
table(dat$Category)
# see how many tailocin only treatments were significant
table(dat$Significance, dat$Category) # 14 but duplicate row..
# subset resistance trade off (RT) genes
RT <- subset(dat, Category == "Resistance Trade-off both ecotypes")
RT_sig <- subset(RT, Significance == "Significant")
# for some reason one row duplicates, so remove duplicate row
RT_sig <- RT_sig[!duplicated(RT_sig), ] # didn't work..
# define RT_set by effect directions (tailocin > 0 & plant < 0)
dat2 <- dat %>%
mutate(
RT_flag_col  = logFC_tailocin > 0 & log2FoldChange_col1025  < 0,
RT_flag_ey   = logFC_tailocin > 0 & log2FoldChange_eyach1025 < 0,
RT_set = case_when(RT_flag_col & RT_flag_ey ~ "Both",
RT_flag_col & !RT_flag_ey ~ "Col-0 only",!RT_flag_col & RT_flag_ey ~ "Eyach only",TRUE ~ "None"))
# define RT sets (tailocin > 0 & plant < 0 with p<0.05)
alpha_thr <- 0.05
dat2 <- dat2 %>% mutate(Significance_RT = case_when(
RT_set == "Both"       ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
RT_set == "Col-0 only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr, "Significant", "Not Significant"),
RT_set == "Eyach only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
TRUE ~ NA_character_))
# eyach scatterplot with colored crosses for RT sets
rt_cols <- c("Both" = "#73D055FF","Col-0 only" = "#440154FF","Eyach only" = "#31688EFF")
# modify the plot to add labels to only focal RTO genes
# Only annotate selected genes
dat2_annotate <- subset(dat2, gene_or_product %in% c("wfgD", "rmlC_1", "tagG_2", "tagH_2", "epsE_4"))
# for some reason rmlC_1 duplicates, so remove duplicate row
dat2_annotate <- dat2_annotate[!duplicated(dat2_annotate), ]
p3 <- ggplot(dat2, aes(x = log2FoldChange_eyach1025, y = logFC_tailocin)) +
geom_point(data = subset(dat2, Category != "Resistance Trade-off"),
aes(color = Significance, shape = Category, alpha = Significance), size = 1.4) +
geom_point(data = subset(dat2, RT_set != "None"),
aes(color = RT_set, shape = Category, alpha = Significance_RT), size = 1.4, stroke = 1.2) +
scale_color_manual(values = c("Significant" = "black", "Not Significant" = "lightgrey", rt_cols),
breaks = c("Not Significant", "Significant"), name = "Significance") +
scale_alpha_manual(values = c("Significant" = 1, "Not Significant" = 0.2), name = "Significance") +
xlab("log Fold Change Eyach") +
ylab("log Fold Change Tailocin") +
theme_minimal() +
geom_text_repel(data = dat2_annotate, aes(label = gene_or_product),
size = 2, box.padding = 0.1)
p3
# save
ggsave("./figures/04_tnseq_scatter.pdf", p3, width = 8, height = 4, dpi = 300)
# 04_tnseq_scatter.R
#
# Purpose:
#   Visualize TnSeq-derived plant fitness/phenotypes as a scatter (or similar summary).
#
# Input:
#   - data/04_tnseq_scatter/tailocin_plant_fitness.csv
#
# Output:
#   - figures/04_tnseq_scatter.pdf
#
# Dependencies:
#   dplyr, ggplot2, viridis
#
# Notes:
#   - Tailor axes/labels to fitness metric used in the CSV.
library(ggplot2)
library(dplyr)
library(viridis)
library(ggrepel)
library(stringr)
library(ggnewscale)
library(readr)
# read in TnSeq data
dat <- read.csv("./data/04_tnseq_scatter/input/merged_tnseq.csv")
# add significance column for plotting
dat <- dat %>% mutate(Significance = ifelse(pvalue_eyach1025 < 0.05 & P.Value_tailocin < 0.05 & pvalue_col1025 < 0.05,
"Significant", "Not Significant"))
# add category column for plotting
dat <- dat %>%
mutate(Category = case_when(
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin > 0 ~ "Resistance Trade-off both ecotypes",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin > 0 ~ "Mutual Benefit",
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin < 0 ~ "Mutual Detriment",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin < 0 ~ "Non-Focal Trade-off"))
# see how many genes there are per category
table(dat$Category)
# see how many tailocin only treatments were significant
table(dat$Significance, dat$Category) # 14 but duplicate row..
# subset resistance trade off (RT) genes
RT <- subset(dat, Category == "Resistance Trade-off both ecotypes")
RT_sig <- subset(RT, Significance == "Significant")
# for some reason one row duplicates, so remove duplicate row
RT_sig <- RT_sig[!duplicated(RT_sig), ] # didn't work..
# define RT_set by effect directions (tailocin > 0 & plant < 0)
dat2 <- dat %>%
mutate(
RT_flag_col  = logFC_tailocin > 0 & log2FoldChange_col1025  < 0,
RT_flag_ey   = logFC_tailocin > 0 & log2FoldChange_eyach1025 < 0,
RT_set = case_when(RT_flag_col & RT_flag_ey ~ "Both",
RT_flag_col & !RT_flag_ey ~ "Col-0 only",!RT_flag_col & RT_flag_ey ~ "Eyach only",TRUE ~ "None"))
# define RT sets (tailocin > 0 & plant < 0 with p<0.05)
alpha_thr <- 0.05
dat2 <- dat2 %>% mutate(Significance_RT = case_when(
RT_set == "Both"       ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
RT_set == "Col-0 only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr, "Significant", "Not Significant"),
RT_set == "Eyach only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
TRUE ~ NA_character_))
# eyach scatterplot with colored crosses for RT sets
rt_cols <- c("Both" = "#73D055FF","Col-0 only" = "#440154FF","Eyach only" = "#31688EFF")
# Only annotate selected genes
dat2_annotate <- subset(dat2, gene_or_product %in% c("wfgD", "rmlC_1", "tagG_2", "tagH_2", "epsE_4"))
# for some reason rmlC_1 duplicates, so remove duplicate row
dat2_annotate <- dat2_annotate[!duplicated(dat2_annotate), ]
# plot!
p3 <- ggplot(dat2, aes(x = log2FoldChange_eyach1025, y = logFC_tailocin)) +
geom_point(data = subset(dat2, Category != "Resistance Trade-off"),
aes(color = Significance, shape = Category, alpha = Significance), size = 1.4) +
geom_point(data = subset(dat2, RT_set != "None"),
aes(color = RT_set, shape = Category, alpha = Significance_RT), size = 1.4, stroke = 1.2) +
scale_color_manual(values = c("Significant" = "black", "Not Significant" = "lightgrey", rt_cols),
breaks = c("Not Significant", "Significant"), name = "Significance") +
scale_alpha_manual(values = c("Significant" = 1, "Not Significant" = 0.2), name = "Significance") +
xlab("log Fold Change Eyach") +
ylab("log Fold Change Tailocin") +
theme_minimal() +
geom_text_repel(data = dat2_annotate, aes(label = gene_or_product),
size = 2, box.padding = 0.1)
p3
dat2_annotate
# 04_tnseq_scatter.R
#
# Purpose:
#   Visualize TnSeq-derived plant fitness/phenotypes as a scatter (or similar summary).
#
# Input:
#   - data/04_tnseq_scatter/tailocin_plant_fitness.csv
#
# Output:
#   - figures/04_tnseq_scatter.pdf
#
# Dependencies:
#   dplyr, ggplot2, viridis
#
# Notes:
#   - Tailor axes/labels to fitness metric used in the CSV.
library(ggplot2)
library(dplyr)
library(viridis)
library(ggrepel)
library(stringr)
library(ggnewscale)
library(readr)
# read in TnSeq data
dat <- read.csv("./data/04_tnseq_scatter/input/merged_tnseq.csv")
# add significance column for plotting
dat <- dat %>% mutate(Significance = ifelse(pvalue_eyach1025 < 0.05 & P.Value_tailocin < 0.05 & pvalue_col1025 < 0.05,
"Significant", "Not Significant"))
# add category column for plotting
dat <- dat %>%
mutate(Category = case_when(
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin > 0 ~ "Resistance Trade-off both ecotypes",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin > 0 ~ "Mutual Benefit",
log2FoldChange_eyach1025 < 0 & log2FoldChange_col1025 < 0 & logFC_tailocin < 0 ~ "Mutual Detriment",
log2FoldChange_eyach1025 > 0 & log2FoldChange_col1025 > 0 & logFC_tailocin < 0 ~ "Non-Focal Trade-off"))
# see how many genes there are per category
table(dat$Category)
# see how many tailocin only treatments were significant
table(dat$Significance, dat$Category) # 14 but duplicate row..
# subset resistance trade off (RT) genes
RT <- subset(dat, Category == "Resistance Trade-off both ecotypes")
RT_sig <- subset(RT, Significance == "Significant")
# define RT_set by effect directions (tailocin > 0 & plant < 0)
dat2 <- dat %>%
mutate(
RT_flag_col  = logFC_tailocin > 0 & log2FoldChange_col1025  < 0,
RT_flag_ey   = logFC_tailocin > 0 & log2FoldChange_eyach1025 < 0,
RT_set = case_when(RT_flag_col & RT_flag_ey ~ "Both",
RT_flag_col & !RT_flag_ey ~ "Col-0 only",!RT_flag_col & RT_flag_ey ~ "Eyach only",TRUE ~ "None"))
# define RT sets (tailocin > 0 & plant < 0 with p<0.05)
alpha_thr <- 0.05
dat2 <- dat2 %>% mutate(Significance_RT = case_when(
RT_set == "Both"       ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
RT_set == "Col-0 only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_col1025  < alpha_thr, "Significant", "Not Significant"),
RT_set == "Eyach only" ~ ifelse(P.Value_tailocin < alpha_thr &
pvalue_eyach1025 < alpha_thr, "Significant", "Not Significant"),
TRUE ~ NA_character_))
# eyach scatterplot with colored crosses for RT sets
rt_cols <- c("Both" = "#73D055FF","Col-0 only" = "#440154FF","Eyach only" = "#31688EFF")
# Only annotate selected genes
dat2_annotate <- subset(dat2, gene_or_product %in% c("wfgD", "rmlC_1", "tagG_2", "tagH_2", "epsE_4"))
# for some reason rmlC_1 duplicates, so remove duplicate row
dat2_annotate <- dat2_annotate %>%
distinct(gene_or_product, .keep_all = TRUE)
# plot!
p3 <- ggplot(dat2, aes(x = log2FoldChange_eyach1025, y = logFC_tailocin)) +
geom_point(data = subset(dat2, Category != "Resistance Trade-off"),
aes(color = Significance, shape = Category, alpha = Significance), size = 1.4) +
geom_point(data = subset(dat2, RT_set != "None"),
aes(color = RT_set, shape = Category, alpha = Significance_RT), size = 1.4, stroke = 1.2) +
scale_color_manual(values = c("Significant" = "black", "Not Significant" = "lightgrey", rt_cols),
breaks = c("Not Significant", "Significant"), name = "Significance") +
scale_alpha_manual(values = c("Significant" = 1, "Not Significant" = 0.2), name = "Significance") +
xlab("log Fold Change Eyach") +
ylab("log Fold Change Tailocin") +
theme_minimal() +
geom_text_repel(data = dat2_annotate, aes(label = gene_or_product),
size = 2, box.padding = 0.1)
p3
# save
ggsave("./figures/04_tnseq_scatter.pdf", p3, width = 8, height = 4, dpi = 300)
# Read in the counts table
all_exp <- read.table("./data/04_tnseq_scatter/input/plant_tnseq_counts.csv", header = TRUE, sep=",")
#there is inconsistency in naming. everything needs to be made lowercase
count_table_p <- t(all_exp[,12:dim(all_exp)[2]])
sample_order_p <- (all_exp[,1:11])
sample_order_p <- sample_order_p %>% mutate(plant = tolower(plant))
# Let's filter out all samples that have fewer than 25,000 reads
high_enough <- which(colSums(count_table_p, na.rm =TRUE)>=25000)
count_table_filter <-count_table_p[,high_enough]
sample_order_filter <- sample_order_p[high_enough,]
# Let's filter out all samples that are DC3000 treated
right_samples <- which(sample_order_filter$treatment!="dc3000" & sample_order_filter$experiment == "exp_0002" )
count_tab_filter <- count_table_filter[,right_samples]
count_tab_filter <-count_tab_filter[complete.cases(count_tab_filter), ]
samp_filter <- sample_order_filter[right_samples,]
samp_filter$plant <- factor(samp_filter$plant, levels = c("ctrl", "ey15_2", "col_0"))
#now with the filtered dataset, make deseq object
dds <- DESeqDataSetFromMatrix(countData = count_tab_filter,
colData = samp_filter, design = ~ plant)
dds <- estimateSizeFactors(dds)
#now with the filtered dataset, make deseq object
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
levels(dds$plant)
res_col <- as.data.frame(results(dds, contrast = c("plant","col_0", "ctrl" )))
summary(res_col)
res_col <- as.data.frame(results(dds, contrast = c("plant","col_0", "ctrl" )))
res_col <- res_col[order(res_col$padj), ]
res_eyach <-  as.data.frame(results(dds, contrast = c("plant",  "ey15_2", "ctrl")))
colnames(res_eyach) <- paste0( colnames(res_eyach), "_eyach1025")
colnames(res_col) <- paste0( colnames(res_col), "_col1025")
# Give res_col an explicit ID column
res_col_tbl <- res_col %>% rownames_to_column("gene_id")
# Split that gene_id into p25 vs DC3000 helper columns
res_col_tbl <- res_col_tbl %>%
mutate(p25_id    = if_else(grepl("^BJEIHDPM_", gene_id), gene_id, NA_character_),
dc3000_id = if_else(grepl("^WP_",        gene_id), gene_id, NA_character_))
# read the DC3000 <-> p25.C2 mapping
# (file is tab-delimited and contains both WP_ and BJEIHDPM_ columns)
orth_map <- read_tsv("./dat/orthologues_dc3000_p25_c2_7_2022.csv",show_col_types = FALSE) %>%
transmute(dc3000_id = name_dc3000_new, p25_id = name_p25c2) %>% distinct()
# read the DC3000 <-> p25.C2 mapping
# (file is tab-delimited and contains both WP_ and BJEIHDPM_ columns)
orth_map <- read_tsv("./data/04_tnseq_scatter/input/ortho.csv",show_col_types = FALSE) %>%
transmute(dc3000_id = name_dc3000_new, p25_id = name_p25c2) %>% distinct()
# 2) Prepare the mapping and rename its p25 column to avoid suffix confusion
orth_map2 <- orth_map %>%
rename(p25_id_map = p25_id)
# 3) Join and coalesce (no keep=TRUE; keeps a single dc3000_id)
res_col_filled <- res_col_tbl %>%
left_join(orth_map2, by = "dc3000_id") %>%
mutate(p25_id_final = dplyr::coalesce(p25_id, p25_id_map)) %>%
select(-p25_id_map)
# sanity check
res_col_filled %>% summarise(n_total = n(), had_p25_already = sum(!is.na(p25_id)),
filled_from_map = sum(is.na(p25_id) & !is.na(p25_id_final)), still_missing = sum(is.na(p25_id_final)))
# read in tailocin data
tailocin <- read.csv("./data/04_tnseq_scatter/input/tailocin_tnseq.csv", row.names = 1)
# make them all have an ID column to merge by
tailocin$ID <- sub(".*ID=([^;]+).*", "\\1", rownames(tailocin))
# ID tailocin columns
colnames(tailocin) <- paste0( colnames(tailocin), "_tailocin")
# merge tailocin with res_col_filled
merged_tradeoffs <- res_col_filled %>%
left_join(tailocin, by = c("p25_id_final" = "ID_tailocin"))
# subset to only genes we have tailocin data for
merged_tradeoffs <- subset(merged_tradeoffs, logFC_tailocin != "NA")
# need to do the same for eyach dataframe
# Give res_eyach an explicit ID column
res_eyach_tbl <- res_eyach %>% rownames_to_column("gene_id") %>%
mutate(p25_id    = if_else(grepl("^BJEIHDPM_", gene_id), gene_id, NA_character_), dc3000_id = if_else(grepl("^WP_", gene_id), gene_id, NA_character_))
# Fill using the ortholog map we already loaded
res_eyach_filled <- res_eyach_tbl %>%
left_join(orth_map2, by = "dc3000_id") %>%
mutate(p25_id_final = coalesce(p25_id, p25_id_map)) %>%
select(-p25_id_map)
# merge eyach, col, and tailocin
# merge eyach with merged_tradeoffs
merged_tradeoffs_all <- merged_tradeoffs %>%
left_join(res_eyach_filled, by = "p25_id_final")
# export data
write.csv(merged_tradeoffs_all,"./data/04_tnseq_scatter/output/merged_tnseq.csv")
# 05_geneplot.R
#
# Purpose:
#   Plot the focal OBC cluster gene map, colored by TnSeq results (Category).
#
# Input:
#   - data/05_geneplot/p25C2_tnseq_geneplot.csv
#
# Output:
#   - figures/05_geneplot.pdf
#
# Dependencies:
#   dplyr, ggplot2, viridis
#
# Notes:
#   - Ensure input has gene coordinates, strand, and an effect/score to map to color.
library(ggplot2)
library(gggenes)
library(viridis)
# make color palette
c25 <- c("black","#73D055FF")
# read gene plot data (a csv file with the following headers:
# molecule gene start end strand direction)
dat <- read.table("./data/05_geneplot/p25C2_tnseq_geneplot.csv", header = TRUE, sep=",")
# plot
p <- ggplot(dat, aes(xmin = start, xmax = end, y = molecule, fill = Category)) +
geom_gene_arrow() + labs(x = "Basepairs (bp)") +
ggtitle("O-Antigen biosynthesis gene cluster") +
geom_text(aes(x = (start + end) / 2, y = as.numeric(as.factor(molecule)) + 0.08,
label = paste0("italic(", gene, ")")),
size = 3, angle = 30, hjust = 0, vjust = 0, parse = TRUE) +
scale_fill_manual(values = c25) + theme_minimal() +
theme(axis.line = element_blank(),  # Removes axis lines
axis.ticks = element_blank(), # Removes axis ticks
axis.text.x = element_blank(),  # Removes axis text
axis.text.y = element_text(angle = 90, hjust = 0.5),
axis.title.y = element_blank(),
panel.grid = element_blank())
p
View(dat)
# make color palette
c25 <- c("black","#73D055FF","grey70")
# 05_geneplot.R
#
# Purpose:
#   Plot the focal OBC cluster gene map, colored by TnSeq results (Category).
#
# Input:
#   - data/05_geneplot/p25C2_tnseq_geneplot.csv
#
# Output:
#   - figures/05_geneplot.pdf
#
# Dependencies:
#   dplyr, ggplot2, viridis
#
# Notes:
#   - Ensure input has gene coordinates, strand, and an effect/score to map to color.
library(ggplot2)
library(gggenes)
library(viridis)
# make color palette
c25 <- c("black","#73D055FF","grey70")
# read gene plot data (a csv file with the following headers:
# molecule gene start end strand direction)
dat <- read.table("./data/05_geneplot/p25C2_tnseq_geneplot.csv", header = TRUE, sep=",")
# plot
p <- ggplot(dat, aes(xmin = start, xmax = end, y = molecule, fill = Category)) +
geom_gene_arrow() + labs(x = "Basepairs (bp)") +
ggtitle("O-Antigen biosynthesis gene cluster") +
geom_text(aes(x = (start + end) / 2, y = as.numeric(as.factor(molecule)) + 0.08,
label = paste0("italic(", gene, ")")),
size = 3, angle = 30, hjust = 0, vjust = 0, parse = TRUE) +
scale_fill_manual(values = c25) + theme_minimal() +
theme(axis.line = element_blank(),  # Removes axis lines
axis.ticks = element_blank(), # Removes axis ticks
axis.text.x = element_blank(),  # Removes axis text
axis.text.y = element_text(angle = 90, hjust = 0.5),
axis.title.y = element_blank(),
panel.grid = element_blank())
p
# make color palette
#c25 <- c("black","#73D055FF","grey70") # black-MD, green-nodata, grey-RTO
c25 <- c("#73D055FF","grey70","black")
# read gene plot data (a csv file with the following headers:
# molecule gene start end strand direction)
dat <- read.table("./data/05_geneplot/p25C2_tnseq_geneplot.csv", header = TRUE, sep=",")
# plot
p <- ggplot(dat, aes(xmin = start, xmax = end, y = molecule, fill = Category)) +
geom_gene_arrow() + labs(x = "Basepairs (bp)") +
ggtitle("O-Antigen biosynthesis gene cluster") +
geom_text(aes(x = (start + end) / 2, y = as.numeric(as.factor(molecule)) + 0.08,
label = paste0("italic(", gene, ")")),
size = 3, angle = 30, hjust = 0, vjust = 0, parse = TRUE) +
scale_fill_manual(values = c25) + theme_minimal() +
theme(axis.line = element_blank(),  # Removes axis lines
axis.ticks = element_blank(), # Removes axis ticks
axis.text.x = element_blank(),  # Removes axis text
axis.text.y = element_text(angle = 90, hjust = 0.5),
axis.title.y = element_blank(),
panel.grid = element_blank())
p
# make color palette
#c25 <- c("black","#73D055FF","grey70") # black-MD, green-nodata, grey-RTO
#c25 <- c("#73D055FF","grey70","black") # black-RTO, green-MD, grey-nodata!
c25 <- c("black","grey70","#73D055FF")
# read gene plot data (a csv file with the following headers:
# molecule gene start end strand direction)
dat <- read.table("./data/05_geneplot/p25C2_tnseq_geneplot.csv", header = TRUE, sep=",")
# plot
p <- ggplot(dat, aes(xmin = start, xmax = end, y = molecule, fill = Category)) +
geom_gene_arrow() + labs(x = "Basepairs (bp)") +
ggtitle("O-Antigen biosynthesis gene cluster") +
geom_text(aes(x = (start + end) / 2, y = as.numeric(as.factor(molecule)) + 0.08,
label = paste0("italic(", gene, ")")),
size = 3, angle = 30, hjust = 0, vjust = 0, parse = TRUE) +
scale_fill_manual(values = c25) + theme_minimal() +
theme(axis.line = element_blank(),  # Removes axis lines
axis.ticks = element_blank(), # Removes axis ticks
axis.text.x = element_blank(),  # Removes axis text
axis.text.y = element_text(angle = 90, hjust = 0.5),
axis.title.y = element_blank(),
panel.grid = element_blank())
p
# save plot
ggsave("./figures/05_geneplot.pdf", p, width = 8, height = 6)
# save plot
ggsave("./figures/05_geneplot.png", p, width = 8, height = 6)
